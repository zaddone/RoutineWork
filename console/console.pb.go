// Code generated by protoc-gen-go. DO NOT EDIT.
// source: console.proto

package console

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LastTime struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=Tag" json:"Tag,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Scale                int64    `protobuf:"varint,3,opt,name=Scale" json:"Scale,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastTime) Reset()         { *m = LastTime{} }
func (m *LastTime) String() string { return proto.CompactTextString(m) }
func (*LastTime) ProtoMessage()    {}
func (*LastTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_console_94a7fa9325a91fb3, []int{0}
}
func (m *LastTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastTime.Unmarshal(m, b)
}
func (m *LastTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastTime.Marshal(b, m, deterministic)
}
func (dst *LastTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastTime.Merge(dst, src)
}
func (m *LastTime) XXX_Size() int {
	return xxx_messageInfo_LastTime.Size(m)
}
func (m *LastTime) XXX_DiscardUnknown() {
	xxx_messageInfo_LastTime.DiscardUnknown(m)
}

var xxx_messageInfo_LastTime proto.InternalMessageInfo

func (m *LastTime) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *LastTime) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LastTime) GetScale() int64 {
	if m != nil {
		return m.Scale
	}
	return 0
}

type InstrumentSimple struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentSimple) Reset()         { *m = InstrumentSimple{} }
func (m *InstrumentSimple) String() string { return proto.CompactTextString(m) }
func (*InstrumentSimple) ProtoMessage()    {}
func (*InstrumentSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_console_94a7fa9325a91fb3, []int{1}
}
func (m *InstrumentSimple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentSimple.Unmarshal(m, b)
}
func (m *InstrumentSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentSimple.Marshal(b, m, deterministic)
}
func (dst *InstrumentSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentSimple.Merge(dst, src)
}
func (m *InstrumentSimple) XXX_Size() int {
	return xxx_messageInfo_InstrumentSimple.Size(m)
}
func (m *InstrumentSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentSimple.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentSimple proto.InternalMessageInfo

func (m *InstrumentSimple) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type InstrumentReply struct {
	State                bool     `protobuf:"varint,1,opt,name=State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentReply) Reset()         { *m = InstrumentReply{} }
func (m *InstrumentReply) String() string { return proto.CompactTextString(m) }
func (*InstrumentReply) ProtoMessage()    {}
func (*InstrumentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_console_94a7fa9325a91fb3, []int{2}
}
func (m *InstrumentReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentReply.Unmarshal(m, b)
}
func (m *InstrumentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentReply.Marshal(b, m, deterministic)
}
func (dst *InstrumentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentReply.Merge(dst, src)
}
func (m *InstrumentReply) XXX_Size() int {
	return xxx_messageInfo_InstrumentReply.Size(m)
}
func (m *InstrumentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentReply.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentReply proto.InternalMessageInfo

func (m *InstrumentReply) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

type Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_console_94a7fa9325a91fb3, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

// message AccountId {
// 	string Id = 1;
// 	uint32 Num = 2;
// }
type Instrument struct {
	Name                        string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	DisplayPrecision            float64  `protobuf:"fixed64,2,opt,name=DisplayPrecision" json:"DisplayPrecision,omitempty"`
	MarginRate                  float64  `protobuf:"fixed64,3,opt,name=MarginRate" json:"MarginRate,omitempty"`
	MaximumOrderUnits           float64  `protobuf:"fixed64,4,opt,name=MaximumOrderUnits" json:"MaximumOrderUnits,omitempty"`
	MaximumPositionSize         float64  `protobuf:"fixed64,5,opt,name=MaximumPositionSize" json:"MaximumPositionSize,omitempty"`
	MaximumTrailingStopDistance float64  `protobuf:"fixed64,6,opt,name=MaximumTrailingStopDistance" json:"MaximumTrailingStopDistance,omitempty"`
	MinimumTradeSize            float64  `protobuf:"fixed64,7,opt,name=MinimumTradeSize" json:"MinimumTradeSize,omitempty"`
	MinimumTrailingStopDistance float64  `protobuf:"fixed64,8,opt,name=MinimumTrailingStopDistance" json:"MinimumTrailingStopDistance,omitempty"`
	PipLocation                 float64  `protobuf:"fixed64,9,opt,name=PipLocation" json:"PipLocation,omitempty"`
	TradeUnitsPrecision         float64  `protobuf:"fixed64,10,opt,name=TradeUnitsPrecision" json:"TradeUnitsPrecision,omitempty"`
	Type                        string   `protobuf:"bytes,11,opt,name=Type" json:"Type,omitempty"`
	Online                      bool     `protobuf:"varint,12,opt,name=Online" json:"Online,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_console_94a7fa9325a91fb3, []int{4}
}
func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (dst *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(dst, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instrument) GetDisplayPrecision() float64 {
	if m != nil {
		return m.DisplayPrecision
	}
	return 0
}

func (m *Instrument) GetMarginRate() float64 {
	if m != nil {
		return m.MarginRate
	}
	return 0
}

func (m *Instrument) GetMaximumOrderUnits() float64 {
	if m != nil {
		return m.MaximumOrderUnits
	}
	return 0
}

func (m *Instrument) GetMaximumPositionSize() float64 {
	if m != nil {
		return m.MaximumPositionSize
	}
	return 0
}

func (m *Instrument) GetMaximumTrailingStopDistance() float64 {
	if m != nil {
		return m.MaximumTrailingStopDistance
	}
	return 0
}

func (m *Instrument) GetMinimumTradeSize() float64 {
	if m != nil {
		return m.MinimumTradeSize
	}
	return 0
}

func (m *Instrument) GetMinimumTrailingStopDistance() float64 {
	if m != nil {
		return m.MinimumTrailingStopDistance
	}
	return 0
}

func (m *Instrument) GetPipLocation() float64 {
	if m != nil {
		return m.PipLocation
	}
	return 0
}

func (m *Instrument) GetTradeUnitsPrecision() float64 {
	if m != nil {
		return m.TradeUnitsPrecision
	}
	return 0
}

func (m *Instrument) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Instrument) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func init() {
	proto.RegisterType((*LastTime)(nil), "console.LastTime")
	proto.RegisterType((*InstrumentSimple)(nil), "console.InstrumentSimple")
	proto.RegisterType((*InstrumentReply)(nil), "console.InstrumentReply")
	proto.RegisterType((*Request)(nil), "console.Request")
	proto.RegisterType((*Instrument)(nil), "console.Instrument")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// rpc GetAccountId(Request) returns (stream AccountId){}
	ListInstrument(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_ListInstrumentClient, error)
	StartInstrument(ctx context.Context, in *InstrumentSimple, opts ...grpc.CallOption) (*InstrumentReply, error)
	GetLastTime(ctx context.Context, in *InstrumentSimple, opts ...grpc.CallOption) (Greeter_GetLastTimeClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) ListInstrument(ctx context.Context, in *Request, opts ...grpc.CallOption) (Greeter_ListInstrumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[0], "/console.Greeter/ListInstrument", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterListInstrumentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ListInstrumentClient interface {
	Recv() (*Instrument, error)
	grpc.ClientStream
}

type greeterListInstrumentClient struct {
	grpc.ClientStream
}

func (x *greeterListInstrumentClient) Recv() (*Instrument, error) {
	m := new(Instrument)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) StartInstrument(ctx context.Context, in *InstrumentSimple, opts ...grpc.CallOption) (*InstrumentReply, error) {
	out := new(InstrumentReply)
	err := c.cc.Invoke(ctx, "/console.Greeter/StartInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetLastTime(ctx context.Context, in *InstrumentSimple, opts ...grpc.CallOption) (Greeter_GetLastTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[1], "/console.Greeter/GetLastTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterGetLastTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_GetLastTimeClient interface {
	Recv() (*LastTime, error)
	grpc.ClientStream
}

type greeterGetLastTimeClient struct {
	grpc.ClientStream
}

func (x *greeterGetLastTimeClient) Recv() (*LastTime, error) {
	m := new(LastTime)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// rpc GetAccountId(Request) returns (stream AccountId){}
	ListInstrument(*Request, Greeter_ListInstrumentServer) error
	StartInstrument(context.Context, *InstrumentSimple) (*InstrumentReply, error)
	GetLastTime(*InstrumentSimple, Greeter_GetLastTimeServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_ListInstrument_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).ListInstrument(m, &greeterListInstrumentServer{stream})
}

type Greeter_ListInstrumentServer interface {
	Send(*Instrument) error
	grpc.ServerStream
}

type greeterListInstrumentServer struct {
	grpc.ServerStream
}

func (x *greeterListInstrumentServer) Send(m *Instrument) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_StartInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentSimple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).StartInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.Greeter/StartInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).StartInstrument(ctx, req.(*InstrumentSimple))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetLastTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstrumentSimple)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).GetLastTime(m, &greeterGetLastTimeServer{stream})
}

type Greeter_GetLastTimeServer interface {
	Send(*LastTime) error
	grpc.ServerStream
}

type greeterGetLastTimeServer struct {
	grpc.ServerStream
}

func (x *greeterGetLastTimeServer) Send(m *LastTime) error {
	return x.ServerStream.SendMsg(m)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "console.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartInstrument",
			Handler:    _Greeter_StartInstrument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListInstrument",
			Handler:       _Greeter_ListInstrument_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLastTime",
			Handler:       _Greeter_GetLastTime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "console.proto",
}

func init() { proto.RegisterFile("console.proto", fileDescriptor_console_94a7fa9325a91fb3) }

var fileDescriptor_console_94a7fa9325a91fb3 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0xed, 0xb2, 0x6d, 0x3e, 0x26, 0x40, 0x53, 0x17, 0x21, 0x53, 0x24, 0x14, 0xed, 0x01, 0x2a,
	0x84, 0xaa, 0x0a, 0x8e, 0x1c, 0xe0, 0x50, 0x51, 0x90, 0x12, 0x1a, 0xed, 0x86, 0x1f, 0x60, 0xb6,
	0xa3, 0x68, 0xa4, 0x5d, 0x7b, 0xb1, 0x1d, 0x89, 0xf0, 0x2f, 0xf9, 0x3f, 0x1c, 0x90, 0x67, 0xdd,
	0x24, 0x22, 0x4b, 0x6f, 0x33, 0x6f, 0xde, 0xcc, 0xb3, 0x3d, 0xcf, 0xf0, 0xa8, 0x34, 0xda, 0x99,
	0x0a, 0x2f, 0x1a, 0x6b, 0xbc, 0x11, 0xfd, 0x98, 0x66, 0x9f, 0x60, 0x30, 0x55, 0xce, 0x2f, 0xa8,
	0x46, 0x31, 0x86, 0x74, 0xa1, 0x96, 0x32, 0x99, 0x24, 0xe7, 0xc3, 0x3c, 0x84, 0x42, 0xc0, 0xa1,
	0xa7, 0x1a, 0xe5, 0x83, 0x49, 0x72, 0x9e, 0xe6, 0x1c, 0x8b, 0x27, 0x70, 0x54, 0x94, 0xaa, 0x42,
	0x99, 0x32, 0xd8, 0x26, 0xd9, 0x4b, 0x18, 0x7f, 0xd1, 0xce, 0xdb, 0x55, 0x8d, 0xda, 0x17, 0x54,
	0x37, 0x15, 0x86, 0xee, 0xaf, 0xaa, 0xc6, 0x38, 0x90, 0xe3, 0xec, 0x15, 0x1c, 0x6f, 0x79, 0x39,
	0x36, 0xd5, 0x9a, 0x07, 0x7a, 0xe5, 0x5b, 0xde, 0x20, 0x6f, 0x93, 0x6c, 0x08, 0xfd, 0x1c, 0x7f,
	0xac, 0xd0, 0xf9, 0xec, 0x4f, 0x0a, 0xb0, 0x6d, 0xea, 0x1a, 0x2b, 0x5e, 0xc3, 0xf8, 0x8a, 0x5c,
	0x53, 0xa9, 0xf5, 0xdc, 0x62, 0x49, 0x8e, 0x8c, 0xe6, 0x43, 0x27, 0xf9, 0x1e, 0x2e, 0x5e, 0x00,
	0xcc, 0x94, 0x5d, 0x92, 0xce, 0x83, 0x68, 0xca, 0xac, 0x1d, 0x44, 0xbc, 0x81, 0x93, 0x99, 0xfa,
	0x49, 0xf5, 0xaa, 0xbe, 0xb1, 0xb7, 0x68, 0xbf, 0x69, 0xf2, 0x4e, 0x1e, 0x32, 0x6d, 0xbf, 0x20,
	0x2e, 0xe1, 0x34, 0x82, 0x73, 0xe3, 0xc8, 0x93, 0xd1, 0x05, 0xfd, 0x42, 0x79, 0xc4, 0xfc, 0xae,
	0x92, 0xf8, 0x08, 0xcf, 0x23, 0xbc, 0xb0, 0x8a, 0x2a, 0xd2, 0xcb, 0xc2, 0x9b, 0xe6, 0x8a, 0x9c,
	0x57, 0xba, 0x44, 0xd9, 0xe3, 0xce, 0xfb, 0x28, 0xe1, 0xb6, 0x33, 0xd2, 0xb1, 0x7c, 0x8b, 0x2c,
	0xd8, 0x6f, 0x6f, 0xfb, 0x2f, 0xce, 0x6a, 0x1b, 0x6c, 0x5f, 0x6d, 0x10, 0xd5, 0xfe, 0x4f, 0x11,
	0x13, 0x18, 0xcd, 0xa9, 0x99, 0x9a, 0x52, 0x85, 0x2b, 0xc8, 0x21, 0x77, 0xec, 0x42, 0xe1, 0x0d,
	0x58, 0x90, 0x5f, 0x64, 0xbb, 0x00, 0x68, 0xdf, 0xa0, 0xa3, 0x14, 0x76, 0xb8, 0x58, 0x37, 0x28,
	0x47, 0xed, 0x0e, 0x43, 0x2c, 0x9e, 0x42, 0xef, 0x46, 0x57, 0xa4, 0x51, 0x3e, 0x64, 0x23, 0xc4,
	0xec, 0xed, 0xef, 0x04, 0xfa, 0xd7, 0x16, 0xd1, 0xa3, 0x15, 0xef, 0xe1, 0xf1, 0x94, 0x9c, 0xdf,
	0x71, 0xc3, 0xf8, 0xe2, 0xce, 0xd9, 0xd1, 0x2e, 0x67, 0xa7, 0x1b, 0x64, 0x4b, 0xcb, 0x0e, 0x2e,
	0x13, 0xf1, 0x19, 0x8e, 0x0b, 0xaf, 0xec, 0x6e, 0xf7, 0xb3, 0x0e, 0x6e, 0xeb, 0xde, 0x33, 0xd9,
	0x51, 0x62, 0xc3, 0x66, 0x07, 0xe2, 0x03, 0x8c, 0xae, 0xd1, 0x6f, 0x3e, 0xce, 0x3d, 0x53, 0x4e,
	0x36, 0xa5, 0x3b, 0x76, 0x38, 0xca, 0xf7, 0x1e, 0x7f, 0xc3, 0x77, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xba, 0xd8, 0xeb, 0x16, 0x97, 0x03, 0x00, 0x00,
}
